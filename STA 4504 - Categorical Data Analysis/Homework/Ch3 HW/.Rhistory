knitr::opts_chunk$set(echo = TRUE)
summary(fit)
y <- c(5,18,19,25,7,7,2); n <- c(6,21,20,36,17,18,3)
x <- c(1,2,3,4,5,6,7)
fit <- glm(y/n ~ x, family=binomial(link=logit), weights=n)
summary(fit)
y <- c(5,18,19,25,7,7,2); n <- c(6,21,20,36,17,18,3)
x <- c(1,2,3,4,5,6,7)
fit <- glm(y/n ~ x, family=binomial(link=logit), weights=n)
summary(fit)
confint(fit)
install.packages('aod')
library(aod)
wald.test(fit)
wald.test(fit, Terms = x)
-0.5901/0.1564
qnorm(p=.50)
qnorm(p=.90)
qnorm(p=.95)
qnorm(p=.975)
qbinom(p=.975)
qbinom(n=n, p=y/n, p=.975)
packages <- c('mdscore')
install.packages(packages)
lapply(packages, library, characters.only = TRUE)
lapply(packages, require, characters.only = TRUE)
lapply(library, packages, characters.only = TRUE)
lapply(packages, library, character.only = TRUE)
wald.test(model = fit)
wald.test(model = fit, terms = 1)
wald.test(model = fit, terms = c('x'))
-0.5901/0.1564
packages <- c('lmtest')
install.packages(packages)
install.packages(packages)
lapply(packages, library, character.only = TRUE)
waldtest(fit)
-0.5901/0.1564
load('MASS')
packages <- c('lmtest', 'MASS')
install.packages(packages)
lapply(packages, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
load('MASS')
library('MASS')
confint(object = fit, level = 0.95)
y <- c(5,18,19,25,7,7,2); n <- c(6,21,20,36,17,18,3)
x <- c(1,2,3,4,5,6,7)
fit <- glm(y/n ~ x, family=binomial(link=logit), weights=n)
summary(fit)
confint(fit)
# summary(fit)
confint(fit)
y <- c(5,18,19,25,7,7,2); n <- c(6,21,20,36,17,18,3)
x <- c(1,2,3,4,5,6,7)
fit <- glm(y/n ~ x, family=binomial(link=logit), weights=n)
summary(fit)
confint(fit)
confint(object = fit, level = 0.95, type = 'Wald')
confint(object = fit, level = 0.95, type = 'as')
confint(object = fit, level = 0.95, type = 'lrt')
confint(object = fit, level = 0.95, type = c('Wald'))
confint(object = fit, level = 0.95, type = c('Waldasdsad'))
waldtest(fit)
summary(fit)
fit_summary <- summary(fit)
fit_summary$df.residual
fit_summary$coefficients
fit_summary$coefficients[0]
type(fit_summary$coefficients)
typeof(fit_summary$coefficients)
as.matrix(fit_summary$coefficients)
as.matrix(fit_summary$coefficients)[1, 0]
as.data.frame(fit_summary$coefficients)
as.data.frame(fit_summary$coefficients)[:]
as.data.frame(fit_summary$coefficients)[c(0)]
as.data.frame(fit_summary$coefficients)[c(0, 1)]
as.data.frame(fit_summary$coefficients)[c(0, 3)]
as.data.frame(fit_summary$coefficients)[c(0, 3), c(0)]
as.data.frame(fit_summary$coefficients)[c(0), c(0)]
as.data.frame(fit_summary$coefficients)[c(1), c(1)]
as.data.frame(fit_summary$coefficients)[1, 1]
as.data.frame(fit_summary$coefficients)
as.data.frame(fit_summary$coefficients)['x', 'Estimate']
fit_summary <- summary(fit)
fit_estimates <- as.data.frame(fit_summary$coefficients)
fit_summary
fit_estimates
wald_test_statistic <- fit_estimates['x', 'Estimates']
print(wald_test_statistic)
wald_test_statistic <- fit_estimates['x', 'Estimates']
print(wald_test_statistic)
wald_test_statistic <- fit_estimates['x', 'Estimate']
print(wald_test_statistic)
wald_test_statistic <- fit_estimates['x', 'Estimate'] / fit_estimates['x', 'Std. Error']
print(wald_test_statistic)
confint(object = fit, level = 0.95, type = )
waldtest(fit)
waldtest(y/n ~ x, family=binomial(link=logit), weights=n)
waldtest(y/n ~ x, binomial(link=logit), n)
waldtest(y/n ~ x)
waldtest(glm(y/n ~ x, family=binomial(link=logit), weights=n))
# two different ways
waldtest(fit)
wald_test_statistic <- fit_estimates['x', 'Estimate'] / fit_estimates['x', 'Std. Error']
print(wald_test_statistic)
b_estimate <- fit_estimates['x', 'Estimate']
var_b_estimate <- fit_estimates['x', 'Std. Error']
wald_test_statistic <- b_estimate / var_b_estimate
cat('beta hat:', b_estimate)
rm(ls())
rm(list = ls())
packages <- c('lmtest', 'MASS')
install.packages(packages)
lapply(packages, library, character.only = TRUE)
install.packages(packages)
y <- c(5,18,19,25,7,7,2); n <- c(6,21,20,36,17,18,3)
x <- c(1,2,3,4,5,6,7)
fit <- glm(y/n ~ x, family=binomial(link=logit), weights=n)
summary(fit)
confint(fit)
fit_summary <- summary(fit)
fit_estimates <- as.data.frame(fit_summary$coefficients)
fit_summary
fit_estimates
b_estimate <- fit_estimates['x', 'Estimate']
se <- fit_estimates['x', 'Std. Error']
wald_test_statistic <- b_estimate / se
cat('beta hat:', b_estimate)
print(wald_test_statistic)
b_estimate <- fit_estimates['x', 'Estimate']
se <- fit_estimates['x', 'Std. Error']
wald_test_statistic <- b_estimate / se
cat('\nbeta hat: ', b_estimate)
cat('\nse: ', se)
cat('\nWald test statistic: ', wald_test_statistic)
waldtest(fit)
pchisq(q = wald_test_statistic, df = 1)
pchisq(q = wald_test_statistic^2, df = 1)
pchisq(q = wald_test_statistic^2, df = 1, lower.tail = FALSE)
# Computing Wald test statistic
b_estimate <- fit_estimates['x', 'Estimate']
se <- fit_estimates['x', 'Std. Error']
wald_test_statistic <- b_estimate / se
cat('\nbeta hat: ', b_estimate)
cat('\nse: ', se)
cat('\nWald test statistic: ', wald_test_statistic)
# Assuming the reduced model uses only 1 less variable than full model (7 predictors)
cat('\np-value: ', pchisq(q = wald_test_statistic^2, df = 1, lower.tail = FALSE))
drop1(fit, test = 'LRT)
drop1(fit, test = 'LRT')
drop1(fit, test = 'LRT')
lrtest(fit)
drop1(fit, test = 'LRT')
lrtest(fit)
model0 <- glm(y/n ~ 1, family=binomial(link=logit), weights=n)
model1 <- glm(y/n ~ x, family=binomial(link=logit), weights=n)
model0 <- glm(y/n ~ 1, family=binomial(link=logit), weights=n)
model1 <- glm(y/n ~ x, family=binomial(link=logit), weights=n)
lrtest(model0, model1)
drop1(fit, test = 'LRT')
confint(object = fit, ty = 'Wald', level = 0.95)
confint(object = fit, 'Wald', level = 0.95)
confint(object = fit, 'Wald', 0.95)
confint( fit, 'Wald', 0.95)
packages <- c('lmtest', 'MASS', 'pim')
install.packages(packages)
install.packages(packages)
lapply(packages, library, character.only = TRUE)
confint.glm()
confint
confint.glm
library(MASS)
confint.glm
confint.glm(fit)
confint.default(fit1)
confint.default(fit)
confint.default(fit, level = 0.95)
methods(confint)
confint.glm.
print(confint.glm)
print(confint.glm.wald)
confint(fit, method = 'Wald', level = 0.95)
print(confint.pim)
confint.pim
