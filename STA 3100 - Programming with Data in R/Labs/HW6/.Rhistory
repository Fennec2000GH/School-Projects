# Defining the full model
nc.formula <- weight ~ mage + weeks + premie + visits + marital + gained + lowbirthweight + gender + habit + whitemom
nc.lm <- lm(formula = nc.formula, data = nc)
# Coefficient diagnostics
cat("summary of full model:\n")
nc.summary_initial <- summary(object = nc.lm)
nc.summary_initial
# Computing VIF scores
ols_vif_tol(nc.lm)
# Best models based on number of coefficients kept
nc.leaps <- regsubsets(x = nc.formula, data = nc, nbest = 10)
summary(nc.leaps)
plot(nc.leaps, main = "Kept Features Based on Best Model using n Features", xlabel = "Features", ylabel = "R^2", scale = "r2")
nc.formula_final <- weight ~ mage + weeks + gained + gender + habit + whitemom
nc.lm_final <- lm(formula = nc.formula_final, data = nc)
summary(nc.lm_final)
# Full model diagnostics (every feature is included)
nc.summary_initial
pvalues_initial <- as.vector(x = to_vec(expr = for(i in 1:11) nc.summary_initial$coefficients[i, "Pr(>|t|)"]))
cat("p-values for initial model:\n", pvalues_initial, "\n")
# indexes of pvalues_initial ranking from largest (index 1) to smallest (index 11) p-value
pv_idx <- order(pvalues_initial, decreasing = TRUE)
cat("pv_idx:\n", pv_idx, "\n\n")
# column names sorted by corresponding p-value descendingly
cols_pv_desc <- cols[pv_idx][1:10]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
# backward elimination
best_r2_adj_BW <- 0
best_formulaBW <- NULL
nc.lm_best_BW <- NULL
for (idx in 1:10) {
formulaBW <-  eval(expr = parse(text = paste("weight ~", paste(cols_pv_desc[3:10], collapse = " + "))))
nc.lm_BW <- lm(formula = formulaBW, data = nc)
nc.summary_BW <- summary(object = nc.lm_BW)
if (nc.summary_BW$adj.r.squared > best_r2_adj_BW) {
best_r2_adj_BW <- nc.summary_BW$adj.r.squared
best_formulaBW <- formulaBW
nc.lm_best_BW <- nc.lm_BW
}
}
cat("Best model from backward elimination:\n")
nc.lm_best_BW
cat("nc.lm_best_BW formula:\n")
best_formulaBW
# comparing original reduced model with backward elimination produced best model
anova(nc.lm_final, nc.lm_best_BW)
# Full model diagnostics (every feature is included)
nc.summary_initial
pvalues_initial <- as.vector(x = to_vec(expr = for(i in 1:11) nc.summary_initial$coefficients[i, "Pr(>|t|)"]))
cat("p-values for initial model:\n", pvalues_initial, "\n")
# indexes of pvalues_initial ranking from largest (index 1) to smallest (index 11) p-value
pv_idx <- order(pvalues_initial, decreasing = TRUE)
cat("pv_idx:\n", pv_idx, "\n\n")
# column names sorted by corresponding p-value descendingly
cols_pv_desc <- cols[pv_idx][1:10]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
# backward elimination
best_r2_adj_BW <- 0
best_formulaBW <- NULL
nc.lm_best_BW <- NULL
for (idx in 1:10) {
formulaBW <-  eval(expr = parse(text = paste("weight ~", paste(cols_pv_desc[3:10], collapse = " + "))))
nc.lm_BW <- lm(formula = formulaBW, data = nc)
nc.summary_BW <- summary(object = nc.lm_BW)
if (nc.summary_BW$adj.r.squared > best_r2_adj_BW) {
best_r2_adj_BW <- nc.summary_BW$adj.r.squared
best_formulaBW <- formulaBW
nc.lm_best_BW <- nc.lm_BW
}
}
cat("Best model from backward elimination:\n")
nc.lm_best_BW
summary(nc.lm_best_BW)
cat("nc.lm_best_BW formula:\n")
best_formulaBW
# comparing original reduced model with backward elimination produced best model
anova(nc.lm_final, nc.lm_best_BW)
# column names sorted by corresponding p-value descendingly
cols_pv_desc <- cols[pv_idx][!4]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
cat("pv_idx:\n", pv_idx, "\n\n")
# column names sorted by corresponding p-value descendingly
cols_pv_desc <- cols[pv_idx][c(1:3, 5:8)]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
# Full model diagnostics (every feature is included)
nc.summary_initial
pvalues_initial <- as.vector(x = to_vec(expr = for(i in 1:11) nc.summary_initial$coefficients[i, "Pr(>|t|)"]))
cat("p-values for initial model:\n", pvalues_initial, "\n")
# indexes of pvalues_initial ranking from largest (index 1) to smallest (index 11) p-value
pv_idx <- order(pvalues_initial, decreasing = TRUE)
cat("pv_idx:\n", pv_idx, "\n\n")
# column names sorted by corresponding p-value descendingly
cols_pv_desc <- cols[pv_idx][c(1:3, 5:8)]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
# backward elimination
best_r2_adj_BW <- 0
best_formulaBW <- NULL
nc.lm_best_BW <- NULL
for (idx in 1:10) {
formulaBW <-  eval(expr = parse(text = paste("weight ~", paste(cols_pv_desc[3:10], collapse = " + "))))
nc.lm_BW <- lm(formula = formulaBW, data = nc)
nc.summary_BW <- summary(object = nc.lm_BW)
if (nc.summary_BW$adj.r.squared > best_r2_adj_BW) {
best_r2_adj_BW <- nc.summary_BW$adj.r.squared
best_formulaBW <- formulaBW
nc.lm_best_BW <- nc.lm_BW
}
}
# Full model diagnostics (every feature is included)
nc.summary_initial
pvalues_initial <- as.vector(x = to_vec(expr = for(i in 1:11) nc.summary_initial$coefficients[i, "Pr(>|t|)"]))
cat("p-values for initial model:\n", pvalues_initial, "\n")
# indexes of pvalues_initial ranking from largest (index 1) to smallest (index 11) p-value
pv_idx <- order(pvalues_initial, decreasing = TRUE)
cat("pv_idx:\n", pv_idx, "\n\n")
# column names sorted by corresponding p-value descendingly
# redundant variables and weight (mature, lowbirthweight, weight) also removed
cols_pv_desc <- cols[pv_idx][c(1:3, 5:8)]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
# backward elimination
best_r2_adj_BW <- 0
best_formulaBW <- NULL
nc.lm_best_BW <- NULL
for (idx in 1:length(x = cols_pv_desc)) {
formulaBW <-  eval(expr = parse(text = paste("weight ~", paste(cols_pv_desc[3:10], collapse = " + "))))
nc.lm_BW <- lm(formula = formulaBW, data = nc)
nc.summary_BW <- summary(object = nc.lm_BW)
if (nc.summary_BW$adj.r.squared > best_r2_adj_BW) {
best_r2_adj_BW <- nc.summary_BW$adj.r.squared
best_formulaBW <- formulaBW
nc.lm_best_BW <- nc.lm_BW
}
}
# Full model diagnostics (every feature is included)
nc.summary_initial
pvalues_initial <- as.vector(x = to_vec(expr = for(i in 1:11) nc.summary_initial$coefficients[i, "Pr(>|t|)"]))
cat("p-values for initial model:\n", pvalues_initial, "\n")
# indexes of pvalues_initial ranking from largest (index 1) to smallest (index 11) p-value
pv_idx <- order(pvalues_initial, decreasing = TRUE)
cat("pv_idx:\n", pv_idx, "\n\n")
# column names sorted by corresponding p-value descendingly
# redundant variables and weight (mature, lowbirthweight, weight) also removed
cols_pv_desc <- cols[pv_idx][c(1:3, 5:8)]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
# backward elimination
best_r2_adj_BW <- 0
best_formulaBW <- NULL
nc.lm_best_BW <- NULL
for (idx in 1:length(x = cols_pv_desc)) {
formulaBW <-  eval(expr = parse(text = paste("weight ~", paste(cols_pv_desc[3:length(x = cols_pv_desc)], collapse = " + "))))
nc.lm_BW <- lm(formula = formulaBW, data = nc)
nc.summary_BW <- summary(object = nc.lm_BW)
if (nc.summary_BW$adj.r.squared > best_r2_adj_BW) {
best_r2_adj_BW <- nc.summary_BW$adj.r.squared
best_formulaBW <- formulaBW
nc.lm_best_BW <- nc.lm_BW
}
}
cat("Best model from backward elimination:\n")
nc.lm_best_BW
summary(nc.lm_best_BW)
cat("nc.lm_best_BW formula:\n")
best_formulaBW
# comparing original reduced model with backward elimination produced best model
anova(nc.lm_final, nc.lm_best_BW)
# Full model diagnostics (every feature is included)
nc.summary_initial
pvalues_initial <- as.vector(x = to_vec(expr = for(i in 1:11) nc.summary_initial$coefficients[i, "Pr(>|t|)"]))
cat("p-values for initial model:\n", pvalues_initial, "\n")
# indexes of pvalues_initial ranking from largest (index 1) to smallest (index 11) p-value
pv_idx <- order(pvalues_initial, decreasing = TRUE)
cat("pv_idx:\n", pv_idx, "\n\n")
# column names sorted by corresponding p-value descendingly
# redundant variables and weight (mature, lowbirthweight, weight) also removed
cols_pv_desc <- cols[pv_idx][c(1:3, 5:9)]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
# backward elimination
best_r2_adj_BW <- 0
best_formulaBW <- NULL
nc.lm_best_BW <- NULL
for (idx in 1:length(x = cols_pv_desc)) {
formulaBW <-  eval(expr = parse(text = paste("weight ~", paste(cols_pv_desc[3:length(x = cols_pv_desc)], collapse = " + "))))
nc.lm_BW <- lm(formula = formulaBW, data = nc)
nc.summary_BW <- summary(object = nc.lm_BW)
if (nc.summary_BW$adj.r.squared > best_r2_adj_BW) {
best_r2_adj_BW <- nc.summary_BW$adj.r.squared
best_formulaBW <- formulaBW
nc.lm_best_BW <- nc.lm_BW
}
}
cat("Best model from backward elimination:\n")
nc.lm_best_BW
summary(nc.lm_best_BW)
cat("nc.lm_best_BW formula:\n")
best_formulaBW
# comparing original reduced model with backward elimination produced best model
anova(nc.lm_final, nc.lm_best_BW)
# comparing original reduced model with backward elimination produced best model
model_cmp.anova <- anova(nc.lm_final, nc.lm_best_BW)
# comparing original reduced model with backward elimination produced best model
model_cmp.anova <- anova(nc.lm_final, nc.lm_best_BW)
model_cmp.anova
model_cmp.anova$`Pr(>F)`
model_cmp.anova$Res.Df
model_cmp.anova$F
model_cmp.anova$`Pr(>F)`
model_cmp.anova
model_cmp.anova$`Sum of Sq`
model_cmp.anova$`Sum of Sq`[0] = 11
model_cmp.anova$`Sum of Sq`
model_cmp.anova$`Sum of Sq`[1] = 11
model_cmp.anova$`Sum of Sq`
model_cmp.anova
# Full model diagnostics (every feature is included)
nc.summary_initial
pvalues_initial <- as.vector(x = to_vec(expr = for(i in 1:11) nc.summary_initial$coefficients[i, "Pr(>|t|)"]))
cat("p-values for initial model:\n", pvalues_initial, "\n")
# indexes of pvalues_initial ranking from largest (index 1) to smallest (index 11) p-value
pv_idx <- order(pvalues_initial, decreasing = TRUE)
cat("pv_idx:\n", pv_idx, "\n\n")
# column names sorted by corresponding p-value descendingly
# redundant variables and weight (mature, weight) also removed
cols_pv_desc <- cols[pv_idx][c(1:3, 5:9)]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
# backward elimination
best_r2_adj_BW <- 0
best_formulaBW <- NULL
nc.lm_best_BW <- NULL
for (idx in 1:length(x = cols_pv_desc)) {
formulaBW <-  eval(expr = parse(text = paste("weight ~", paste(cols_pv_desc[3:length(x = cols_pv_desc)], collapse = " + "))))
nc.lm_BW <- lm(formula = formulaBW, data = nc)
nc.summary_BW <- summary(object = nc.lm_BW)
if (nc.summary_BW$adj.r.squared > best_r2_adj_BW) {
best_r2_adj_BW <- nc.summary_BW$adj.r.squared
best_formulaBW <- formulaBW
nc.lm_best_BW <- nc.lm_BW
}
}
cat("Best model from backward elimination:\n")
nc.lm_best_BW
summary(nc.lm_best_BW)
cat("nc.lm_best_BW formula:\n")
best_formulaBW
# comparing original reduced model with backward elimination produced best model
model_cmp.anova <- anova(nc.lm_final, nc.lm_best_BW)
model_cmp.anova
cat("F-score:\n", )
nc.formula_final <- weight ~ mage + weeks + gained + lowbirthweight + gender + habit + whitemom
nc.formula_final <- weight ~ mage + weeks + gained + lowbirthweight + gender + habit + whitemom
nc.lm_final <- lm(formula = nc.formula_final, data = nc)
summary(nc.lm_final)
nc.formula_final <- weight ~ mage + weeks + gained + gender + habit + whitemom
nc.lm_final <- lm(formula = nc.formula_final, data = nc)
summary(nc.lm_final)
anova(object = nc.lm_final)
anova(object = nc.lm_final)
anova(object = nc.lm_final)[2]
anova(object = nc.lm_final)[3]
anova(object = nc.lm_final)[3]`Residuals`
anova(object = nc.lm_final)[4, 3]
anova(object = nc.lm_final)[11, 3]
anova(object = nc.lm_final)[10, 3]
anova(object = nc.lm_final)[9, 3]
anova(object = nc.lm_final)[7, 3]
# Full model diagnostics (every feature is included)
nc.summary_initial
pvalues_initial <- as.vector(x = to_vec(expr = for(i in 1:11) nc.summary_initial$coefficients[i, "Pr(>|t|)"]))
cat("p-values for initial model:\n", pvalues_initial, "\n")
# indexes of pvalues_initial ranking from largest (index 1) to smallest (index 11) p-value
pv_idx <- order(pvalues_initial, decreasing = TRUE)
cat("pv_idx:\n", pv_idx, "\n\n")
# column names sorted by corresponding p-value descendingly
# redundant variables and weight (mature, weight) also removed
cols_pv_desc <- cols[pv_idx][c(1:3, 5:9)]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
# backward elimination
best_r2_adj_BW <- 0
best_formulaBW <- NULL
nc.lm_best_BW <- NULL
for (idx in 1:length(x = cols_pv_desc)) {
formulaBW <-  eval(expr = parse(text = paste("weight ~", paste(cols_pv_desc[3:length(x = cols_pv_desc)], collapse = " + "))))
nc.lm_BW <- lm(formula = formulaBW, data = nc)
nc.summary_BW <- summary(object = nc.lm_BW)
if (nc.summary_BW$adj.r.squared > best_r2_adj_BW) {
best_r2_adj_BW <- nc.summary_BW$adj.r.squared
best_formulaBW <- formulaBW
nc.lm_best_BW <- nc.lm_BW
}
}
cat("Best model from backward elimination:\n")
nc.lm_best_BW
summary(nc.lm_best_BW)
cat("nc.lm_best_BW formula:\n")
best_formulaBW
# comparing original reduced model with backward elimination produced best model
model_cmp.anova <- anova(nc.lm_final, nc.lm_best_BW)
model_cmp.anova
# Full model diagnostics (every feature is included)
nc.summary_initial
pvalues_initial <- as.vector(x = to_vec(expr = for(i in 1:11) nc.summary_initial$coefficients[i, "Pr(>|t|)"]))
cat("p-values for initial model:\n", pvalues_initial, "\n")
# indexes of pvalues_initial ranking from largest (index 1) to smallest (index 11) p-value
pv_idx <- order(pvalues_initial, decreasing = TRUE)
cat("pv_idx:\n", pv_idx, "\n\n")
# column names sorted by corresponding p-value descendingly
# redundant variables and weight (mature, weight) also removed
cols_pv_desc <- cols[pv_idx][c(1:3, 5:9)]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
# backward elimination
best_r2_adj_BW <- 0
best_formulaBW <- NULL
nc.lm_best_BW <- NULL
for (idx in 1:length(x = cols_pv_desc)) {
formulaBW <-  eval(expr = parse(text = paste("weight ~", paste(cols_pv_desc[3:length(x = cols_pv_desc)], collapse = " + "))))
nc.lm_BW <- lm(formula = formulaBW, data = nc)
nc.summary_BW <- summary(object = nc.lm_BW)
if (nc.summary_BW$adj.r.squared > best_r2_adj_BW) {
best_r2_adj_BW <- nc.summary_BW$adj.r.squared
best_formulaBW <- formulaBW
nc.lm_best_BW <- nc.lm_BW
}
}
cat("Best model from backward elimination:\n")
nc.lm_best_BW
summary(nc.lm_best_BW)
cat("nc.lm_best_BW formula:\n")
best_formulaBW
# comparing original reduced model with backward elimination produced best model
anova(nc.lm_final, nc.lm_best_BW)
cat("critical F-value: ", qf(p = 0.95, df1 = 955, df2 = 955), "\n\n")
cat("critical F-value: ", qf(p = 0.95, df1 = 955, df2 = 955), "\n\n")
# Full model diagnostics (every feature is included)
nc.summary_initial
pvalues_initial <- as.vector(x = to_vec(expr = for(i in 1:11) nc.summary_initial$coefficients[i, "Pr(>|t|)"]))
cat("p-values for initial model:\n", pvalues_initial, "\n")
# indexes of pvalues_initial ranking from largest (index 1) to smallest (index 11) p-value
pv_idx <- order(pvalues_initial, decreasing = TRUE)
cat("pv_idx:\n", pv_idx, "\n\n")
# column names sorted by corresponding p-value descendingly
# redundant variables and weight (mature, weight) also removed
cols_pv_desc <- cols[pv_idx][c(1:3, 5:9)]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
# backward elimination
best_r2_adj_BW <- 0
best_formulaBW <- NULL
nc.lm_best_BW <- NULL
for (idx in 1:length(x = cols_pv_desc)) {
formulaBW <-  eval(expr = parse(text = paste("weight ~", paste(cols_pv_desc[3:length(x = cols_pv_desc)], collapse = " + "))))
nc.lm_BW <- lm(formula = formulaBW, data = nc)
nc.summary_BW <- summary(object = nc.lm_BW)
if (nc.summary_BW$adj.r.squared > best_r2_adj_BW) {
best_r2_adj_BW <- nc.summary_BW$adj.r.squared
best_formulaBW <- formulaBW
nc.lm_best_BW <- nc.lm_BW
}
}
cat("Best model from backward elimination:\n")
nc.lm_best_BW
summary(nc.lm_best_BW)
cat("nc.lm_best_BW formula:\n")
best_formulaBW
# comparing original reduced model with backward elimination produced best model
anova(nc.lm_final, nc.lm_best_BW)
cat("critical F-value: ", qf(p = 0.95, df1 = 955, df2 = 955), "\n\n")
# Full model diagnostics (every feature is included)
nc.summary_initial
pvalues_initial <- as.vector(x = to_vec(expr = for(i in 1:11) nc.summary_initial$coefficients[i, "Pr(>|t|)"]))
cat("p-values for initial model:\n", pvalues_initial, "\n")
# indexes of pvalues_initial ranking from largest (index 1) to smallest (index 11) p-value
pv_idx <- order(pvalues_initial, decreasing = TRUE)
cat("pv_idx:\n", pv_idx, "\n\n")
# column names sorted by corresponding p-value descendingly
# redundant variables and weight (mature, weight) also removed
cols_pv_desc <- cols[pv_idx][c(1:3, 5:8)]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
# backward elimination
best_r2_adj_BW <- 0
best_formulaBW <- NULL
nc.lm_best_BW <- NULL
for (idx in 1:length(x = cols_pv_desc)) {
formulaBW <-  eval(expr = parse(text = paste("weight ~", paste(cols_pv_desc[3:length(x = cols_pv_desc)], collapse = " + "))))
nc.lm_BW <- lm(formula = formulaBW, data = nc)
nc.summary_BW <- summary(object = nc.lm_BW)
if (nc.summary_BW$adj.r.squared > best_r2_adj_BW) {
best_r2_adj_BW <- nc.summary_BW$adj.r.squared
best_formulaBW <- formulaBW
nc.lm_best_BW <- nc.lm_BW
}
}
cat("Best model from backward elimination:\n")
nc.lm_best_BW
summary(nc.lm_best_BW)
cat("nc.lm_best_BW formula:\n")
best_formulaBW
# comparing original reduced model with backward elimination produced best model
anova(nc.lm_final, nc.lm_best_BW)
cat("critical F-value: ", qf(p = 0.95, df1 = 955, df2 = 955), "\n\n")
# Full model diagnostics (every feature is included)
nc.summary_initial
pvalues_initial <- as.vector(x = to_vec(expr = for(i in 1:11) nc.summary_initial$coefficients[i, "Pr(>|t|)"]))
cat("p-values for initial model:\n", pvalues_initial, "\n")
# indexes of pvalues_initial ranking from largest (index 1) to smallest (index 11) p-value
pv_idx <- order(pvalues_initial, decreasing = TRUE)
cat("pv_idx:\n", pv_idx, "\n\n")
# column names sorted by corresponding p-value descendingly
# redundant variables and weight (mature, weight) also removed
cols_pv_desc <- cols[pv_idx][c(1:3, 5:8)]
cat("cols_pv_desc:\n", cols_pv_desc, "\n\n")
# backward elimination
best_r2_adj_BW <- 0
best_formulaBW <- NULL
nc.lm_best_BW <- NULL
for (idx in 1:length(x = cols_pv_desc)) {
formulaBW <-  eval(expr = parse(text = paste("weight ~", paste(cols_pv_desc[3:length(x = cols_pv_desc)], collapse = " + "))))
nc.lm_BW <- lm(formula = formulaBW, data = nc)
nc.summary_BW <- summary(object = nc.lm_BW)
if (nc.summary_BW$adj.r.squared > best_r2_adj_BW) {
best_r2_adj_BW <- nc.summary_BW$adj.r.squared
best_formulaBW <- formulaBW
nc.lm_best_BW <- nc.lm_BW
}
}
cat("Best model from backward elimination:\n")
nc.lm_best_BW
summary(nc.lm_best_BW)
cat("nc.lm_best_BW formula:\n")
best_formulaBW
# comparing original reduced model with backward elimination produced best model
anova(nc.lm_final, nc.lm_best_BW)
cat("critical F-value: ", qf(p = 0.95, df1 = 955, df2 = 956), "\n\n")
nc.summary_final <- summary(object = nc.lm_final)
nc.anova_final <- anova(object = nc.lm_final)
nc.summary_final
nc.anova_final
SSTO <- var(x = nc$weight) * (nrow(x = nc) - 1)
cat("SSTO: ", SSTO, "\n")
SSE <- nc.anova_final[7, 2]
cat("SSE: ", SSE, "\n")
SSR <- SSTO - SSE
cat("SSR: ", SSR, "\n")
nc.summary_final
nc.summary_final
nc.anova_final
qt(p = 0.05, df = 955, lower.tail = FALSE)
nc.summary_final
nc.anova_final
qt(p = 0.05, df = 955, lower.tail = FALSE)
nc.summary_final
nc.anova_final
cat("critical t-value: ", qt(p = 0.05, df = 955, lower.tail = FALSE))
plot(nc.lm_final$residuals)
plot(x = 1:nrow(x = nc), y = nc.lm_final$residuals)
plot(x = 1:nrow(x = nc), y = nc.lm_final$residuals, color = "red")
plot(x = 1:nrow(x = nc), y = nc.lm_final$residuals, col = "red")
plot(x = 1:nrow(x = nc), y = nc.lm_final$residuals, col = "red", pch = 3)
plot(x = 1:nrow(x = nc), y = nc.lm_final$residuals, col = "red", pch = 1)
plot(x = 1:nrow(x = nc), y = nc.lm_final$residuals, col = "red", pch = 2)
plot(x = 1:nrow(x = nc), y = nc.lm_final$residuals, col = "red", pch = 16)
plot(x = 1:nrow(x = nc), y = nc.lm_final$residuals, col = "red", pch = 16, main = "Residual Plot")
plot(x = 1:nrow(x = nc), y = nc.lm_final$residuals, col = "red", pch = 16, main = "Residual Plot", xlab = "Index", ylab = "Residuals")
qqnorm(y = nc.lm_final)
qqnorm(y = nc$weight)
qqnorm(y = weight, data = nc)
qqnorm(y = nc$weight)
qqline(y = nc$weight)
plot(x = 1:nrow(x = nc), y = nc.lm_final$residuals, col = "red", pch = 16, main = "Residual Plot", xlab = "Index", ylab = "Residuals")
plot(nc.lm_final)[1]
# scroll through each plot
plot(nc.lm_final)
nc <- read.csv("nc.csv", header=T)
# remove first column, 'fage' variable
nc <- nc[,-1]
# remove records with missing values
nc <- na.omit(nc)
dim(nc)
attach(nc)
# column names of nc
cols <- colnames(x = nc)
# converting all character(string) columns into factor columns
for (idx in 1:length(nc)) {
if(assertthat::are_equal(typeof(nc[1, idx]), "character")) {
eval(expr = parse(text =  paste("nc$", cols[idx], " <- as.factor(x = nc$", cols[idx], ")")))
}
}
str(object = nc)
nc
# Importing required libraries
pkgs <- c("comprehenr", "leaps", "olsrr")
install.packages(pkgs)
lapply(pkgs, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE, fig.align="center", message=FALSE, warning=FALSE)
nc <- read.csv("nc.csv", header=TRUE)
# remove first column, 'fage' variable
nc <- nc[,-1]
# remove records with missing values
nc <- na.omit(nc)
dim(nc)
attach(nc)
# column names of nc
cols <- colnames(x = nc)
# converting all character(string) columns into factor columns
for (idx in 1:length(nc)) {
if(assertthat::are_equal(typeof(nc[1, idx]), "character")) {
eval(expr = parse(text =  paste("nc$", cols[idx], " <- as.factor(x = nc$", cols[idx], ")")))
}
}
str(object = nc)
nc
# Importing required libraries
pkgs <- c("comprehenr", "leaps", "olsrr")
install.packages(pkgs)
lapply(pkgs, require, character.only = TRUE)
