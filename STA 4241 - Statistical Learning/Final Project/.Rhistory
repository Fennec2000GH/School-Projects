caret::preProcess(x = car.data)
# adaboost.model <-
caret::train(formula = accept ~ ., data = car.data, method = 'adaboost')
train(accept ~ ., data = car.data, method='xgboost', tuneLength=5, trControl = fitControl, verbose=F)
# adaboost.model <-
caret::train(formula = accept ~ ., data = car.data, method = 'adaboost')
car.data
is.na(car.data)
car.data <- car.data[stats::complete.cases(car.data), ]
is.na(car.data)
formula
# adaboost.model <-
caret::train(formula = accept ~ ., data = car.data, method = 'adaboost')
car.data
car.data$accept == 'unacc'
car.data$accept == 'vgood'
car.data$accept == 'v-good'
car.data <- car.data %>% mutate(
buying = as.numeric(x = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh'))),
maint = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh')),
doors = factor(x = doors, levels = c('2', '3', '4', '5-more')),
persons = factor(x = persons, levels = c('2', '4', 'more')),
lug_boot = factor(x = lug_boot, levels = c('small', 'med', 'big')),
safety = factor(x = safety, levels = c('low', 'med', 'high')),
accept = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good'))
)
car.data
car.data <- car.data %>% mutate(
buying = as.numeric(x = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh'))),
maint = as.numeric(x = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh'))),
doors = as.numeric(x = factor(x = doors, levels = c('2', '3', '4', '5-more'))),
persons = as.numeric(x = factor(x = persons, levels = c('2', '4', 'more'))),
lug_boot = as.numeric(x = factor(x = lug_boot, levels = c('small', 'med', 'big'))),
safety = as.numeric(x = factor(x = safety, levels = c('low', 'med', 'high'))),
accept = as.numeric(x = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good')))
)
car.data
# adaboost.model <-
caret::train(formula = accept ~ ., data = car.data, method = 'adaboost')
car.data <- read.table(file = 'data/car.data', header = FALSE, sep = ',')
car.data <- data.frame(car.data)
car.data <- car.data[stats::complete.cases(car.data), ]
colnames(x = car.data) <- c('buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'accept')
car.data <- car.data %>% mutate(
buying = as.numeric(x = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh'))),
maint = as.numeric(x = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh'))),
doors = as.numeric(x = factor(x = doors, levels = c('2', '3', '4', '5-more'))),
persons = as.numeric(x = factor(x = persons, levels = c('2', '4', 'more'))),
lug_boot = as.numeric(x = factor(x = lug_boot, levels = c('small', 'med', 'big'))),
safety = as.numeric(x = factor(x = safety, levels = c('low', 'med', 'high'))),
accept = as.numeric(x = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good')))
)
car.data
VIM::barMiss(car.data)
car.data <- read.table(file = 'data/car.data', header = FALSE, sep = ',')
car.data <- data.frame(car.data)
car.data <- car.data[stats::complete.cases(car.data), ]
colnames(x = car.data) <- c('buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'accept')
car.data <- car.data %>% mutate(
buying = as.numeric(x = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh'))),
maint = as.numeric(x = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh'))),
doors = as.numeric(x = factor(x = doors, levels = c('2', '3', '4', '5-more'))),
persons = as.numeric(x = factor(x = persons, levels = c('2', '4', 'more'))),
lug_boot = as.numeric(x = factor(x = lug_boot, levels = c('small', 'med', 'big'))),
safety = as.numeric(x = factor(x = safety, levels = c('low', 'med', 'high'))),
accept = as.numeric(x = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good')))
)
VIM::barMiss(car.data)
VIM::aggr(x = car.data)
car.data <- read.table(file = 'data/car.data', header = FALSE, sep = ',')
car.data <- data.frame(car.data)
colnames(x = car.data) <- c('buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'accept')
car.data <- car.data %>% mutate(
buying = as.numeric(x = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh'))),
maint = as.numeric(x = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh'))),
doors = as.numeric(x = factor(x = doors, levels = c('2', '3', '4', '5-more'))),
persons = as.numeric(x = factor(x = persons, levels = c('2', '4', 'more'))),
lug_boot = as.numeric(x = factor(x = lug_boot, levels = c('small', 'med', 'big'))),
safety = as.numeric(x = factor(x = safety, levels = c('low', 'med', 'high'))),
accept = as.numeric(x = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good')))
)
car.data <- car.data[stats::complete.cases(car.data), ]
VIM::aggr(x = car.data)
car.data
# adaboost.model <-
caret::train(formula = accept ~ ., data = car.data, method = 'adaboost')
car.data <- read.table(file = 'data/car.data', header = FALSE, sep = ',')
car.data <- data.frame(car.data)
colnames(x = car.data) <- c('buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'accept')
car.data <- car.data %>% mutate(
buying = as.integer(x = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh'))),
maint = as.integer(x = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh'))),
doors = as.integer(x = factor(x = doors, levels = c('2', '3', '4', '5-more'))),
persons = as.integer(x = factor(x = persons, levels = c('2', '4', 'more'))),
lug_boot = as.integer(x = factor(x = lug_boot, levels = c('small', 'med', 'big'))),
safety = as.integer(x = factor(x = safety, levels = c('low', 'med', 'high'))),
accept = as.integer(x = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good')))
)
car.data <- car.data[stats::complete.cases(car.data), ]
VIM::aggr(x = car.data)
car.data
# adaboost.model <-
caret::train(formula = accept ~ ., data = car.data, method = 'adaboost')
train(accept ~ ., data = car.data, method='xgboost', tuneLength=5, trControl = fitControl, verbose=F)
train(accept ~ ., data = car.data, method='deepboost', tuneLength=5, trControl = fitControl, verbose=F)
=F
train(accept ~ ., data = car.data, method='xgDart', tuneLength=5, trControl = fitControl, verbose=F)
train(accept ~ ., data = car.data, method='xgDART', tuneLength=5, trControl = fitControl, verbose=F)
train(accept ~ ., data = car.data, method='xgdart', tuneLength=5, trControl = fitControl, verbose=F)
train(accept ~ ., data = car.data, method='deepboost', tuneLength=5, trControl = fitControl, verbose=F)
car.data <- read.table(file = 'data/car.data', header = FALSE, sep = ',')
car.data <- data.frame(car.data)
colnames(x = car.data) <- c('buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'accept')
car.data <- car.data %>% mutate(
buying = as.factor(x = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh'))),
maint = as.factor(x = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh'))),
doors = as.factor(x = factor(x = doors, levels = c('2', '3', '4', '5-more'))),
persons = as.factor(x = factor(x = persons, levels = c('2', '4', 'more'))),
lug_boot = as.factor(x = factor(x = lug_boot, levels = c('small', 'med', 'big'))),
safety = as.factor(x = factor(x = safety, levels = c('low', 'med', 'high'))),
accept = as.factor(x = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good')))
)
car.data <- car.data[stats::complete.cases(car.data), ]
VIM::aggr(x = car.data)
car.data
# adaboost.model <-
caret::train(formula = accept ~ ., data = car.data, method = 'adaboost')
car.data <- read.table(file = 'data/car.data', header = FALSE, sep = ',')
car.data <- data.frame(car.data)
colnames(x = car.data) <- c('buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'accept')
car.data <- car.data %>% mutate(
buying = as.factor(x = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh'))),
maint = as.integer(x = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh'))),
doors = as.integer(x = factor(x = doors, levels = c('2', '3', '4', '5-more'))),
persons = as.factor(x = factor(x = persons, levels = c('2', '4', 'more'))),
lug_boot = as.factor(x = factor(x = lug_boot, levels = c('small', 'med', 'big'))),
safety = as.factor(x = factor(x = safety, levels = c('low', 'med', 'high'))),
accept = as.factor(x = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good')))
)
VIM::aggr(x = car.data)
car.data <- car.data[stats::complete.cases(car.data), ]
VIM::aggr(x = car.data)
car.data
# adaboost.model <-
caret::train(formula = accept ~ ., data = car.data, method = 'adaboost')
car.data <- read.table(file = 'data/car.data', header = FALSE, sep = ',')
car.data <- data.frame(car.data)
colnames(x = car.data) <- c('buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'accept')
car.data <- car.data %>% mutate(
buying = as.factor(x = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh'))),
maint = as.integer(x = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh'))),
doors = as.integer(x = factor(x = doors, levels = c('2', '3', '4', '5-more'))),
persons = as.intger(x = factor(x = persons, levels = c('2', '4', 'more'))),
lug_boot = as.integer(x = factor(x = lug_boot, levels = c('small', 'med', 'big'))),
safety = as.integer(x = factor(x = safety, levels = c('low', 'med', 'high'))),
accept = as.integer(x = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good')))
)
car.data <- read.table(file = 'data/car.data', header = FALSE, sep = ',')
car.data <- data.frame(car.data)
colnames(x = car.data) <- c('buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'accept')
car.data <- car.data %>% mutate(
buying = as.factor(x = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh'))),
maint = as.integer(x = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh'))),
doors = as.integer(x = factor(x = doors, levels = c('2', '3', '4', '5-more'))),
persons = as.intger(x = factor(x = persons, levels = c('2', '4', 'more'))),
lug_boot = as.integer(x = factor(x = lug_boot, levels = c('small', 'med', 'big'))),
safety = as.integer(x = factor(x = safety, levels = c('low', 'med', 'high'))),
accept = as.integer(x = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good')))
)
car.data <- car.data %>% mutate(
buying = as.factor(x = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh'))),
maint = as.integer(x = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh'))),
doors = as.integer(x = factor(x = doors, levels = c('2', '3', '4', '5-more'))),
persons = as.integer(x = factor(x = persons, levels = c('2', '4', 'more'))),
lug_boot = as.integer(x = factor(x = lug_boot, levels = c('small', 'med', 'big'))),
safety = as.integer(x = factor(x = safety, levels = c('low', 'med', 'high'))),
accept = as.integer(x = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good')))
)
car.data <- car.data[stats::complete.cases(car.data), ]
VIM::aggr(x = car.data)
car.data
# adaboost.model <-
caret::train(formula = accept ~ ., data = car.data, method = 'adaboost')
datasets::airmiles
datasets::volcano
abalones
data(abalone)
print(data(abalone))
data(asdasdasdASD)
abalone.data <- read.table(file = 'data/abalone.data')
abalone.data
abalone.data <- read.table(file = 'data/abalone.data', header = TRUE)
abalone.data
abalone.data <- read.table(file = 'https://datahub.io/machine-learning/abalone/r/1.html')
abalone.data
abalone.data <- read.table(url = 'https://datahub.io/machine-learning/abalone/r/1.html')
abalone.data <- read.csv(file = url('https://datahub.io/machine-learning/abalone/r/1.html'))
abalone.data
abalone.data <- read.csv(url('https://datahub.io/machine-learning/abalone/r/1.html'))
abalone.data
abalone.data <- read.csv(file = 'data/abalone.csv')
abalone.data
# adaboost.model <-
caret::train(formula = Length ~ ., data = abalone.data, method = 'adaboost')
VIM::aggr(x = abalone.data)
# adaboost.model <-
caret::train(formula = Length ~ ., data = abalone.data, method = 'adaboost')
abalone.data
abalone.data <- abalone.data %>%mutate(Sex = factor(x = Sex))
abalone.data
# adaboost.model <-
caret::train(formula = Length ~ ., data = abalone.data, method = 'adaboost')
# adaboost.model <-
caret::train(formula = Length ~ ., data = abalone.data, method = 'gbm')
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
error = FALSE
)
packages <- c('fastAdaboost', 'caret', 'dplyr', 'deepboost', 'gbm', 'reticulate', 'VIM', 'xgboost')
install.packages(packages)
lapply(X = packages, FUN = library, character.only = TRUE)
install.packages(packages)
abalone.data <- read.csv(file = 'data/abalone.csv')
abalone.data <- abalone.data %>%mutate(Sex = factor(x = Sex))
abalone.data
# adaboost.model <-
caret::train(formula = Sex ~ ., data = abalone.data, method = 'gbm')
# adaboost.model <-
caret::train(formula = Sex ~ ., data = abalone.data, method = 'adaboost')
abalone.data
abalone.data <- abalone.data %>%mutate(
Sex = factor(x = Sex),
Class_number_of_rings = factor(x = Class_number_of_rings)
)
abalone.data
# adaboost.model <-
caret::train(formula = Sex ~ ., data = abalone.data, method = 'adaboost')
# adaboost.model <-
caret::train(formula = Class_number_of_rings ~ ., data = abalone.data, method = 'adaboost')
# adaboost.model <-
caret::train(formula = Class_number_of_rings ~ Length, data = abalone.data, method = 'adaboost')
# adaboost.model <-
caret::train(formula = Class_number_of_rings ~ Length, data = abalone.data, method = 'adaboost')
abalone.data
# adaboost.model <-
caret::train(formula = Class_number_of_rings ~ Length + Diameter, data = abalone.data, method = 'adaboost')
packages <- c('fastAdaboost', 'caret', 'dplyr', 'deepboost', 'gbm', 'MASS', 'reticulate', 'VIM', 'xgboost')
install.packages(packages)
install.packages(packages)
lapply(X = packages, FUN = library, character.only = TRUE)
MASS::Boston
?MASS::Boston
?MASS::bacteria
MASS::bacteria$y
MASS::bacteria
# adaboost.model <-
caret::train(formula =y ~ ., data = MASS::bacteria, method = 'adaboost')
# adaboost.model <-
caret::train(formula = medv ~ ., data = MASS::Boston, method = 'gbm')
# adaboost.model <-
gbm::gbm(formula = medv ~ ., data = MASS::Boston)
gbm::gbm(formula = buying ~ ., data = car.data)
gbm::gbm(formula = Class_number_of_rings ~ ., data = abalone.data)
range(abalone.data$Class_number_of_rings)
max(abalone.data$Class_number_of_rings)
maximum(abalone.data$Class_number_of_rings)
max(as.numeric(abalone.data$Class_number_of_rings))
car.data <- car.data %>% mutate(
buying = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh')),
maint = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh')),
doors = factor(x = doors, levels = c('2', '3', '4', '5-more')),
persons = factor(x = persons, levels = c('2', '4', 'more')),
lug_boot = factor(x = lug_boot, levels = c('small', 'med', 'big')),
safety = factor(x = safety, levels = c('low', 'med', 'high')),
accept = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good'))
)
car.data <- car.data[stats::complete.cases(car.data), ]
VIM::aggr(x = car.data)
VIM::aggr(x = car.data)
car.data <- read.table(file = 'data/car.data', header = FALSE, sep = ',')
car.data <- data.frame(car.data)
colnames(x = car.data) <- c('buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'accept')
car.data <- car.data %>% mutate(
buying = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh')),
maint = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh')),
doors = factor(x = doors, levels = c('2', '3', '4', '5-more')),
persons = factor(x = persons, levels = c('2', '4', 'more')),
lug_boot = factor(x = lug_boot, levels = c('small', 'med', 'big')),
safety = factor(x = safety, levels = c('low', 'med', 'high')),
accept = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good'))
)
car.data <- car.data[stats::complete.cases(car.data), ]
VIM::aggr(x = car.data)
car.data
abalone.data <- abalone.data %>%mutate(
Sex = factor(x = Sex),
Class_number_of_rings = factor(x = Class_number_of_rings, levels = 1:28)
)
abalone.data
MASS::bacteria
# adaboost.model <-
caret::train(Class_number_of_rings ~ ., data = abalone.data)
# adaboost.model <-
caret::train(Class_number_of_rings ~ ., data = abalone.data, method = 'adaboost')
# adaboost.model <-
abalone.data
# adaboost.model <-
VIM::aggr(abalone.data)
caret::train(Class_number_of_rings ~ ., data = abalone.data, method = 'adaboost', na.action = na.rm)
caret::train(Class_number_of_rings ~ ., data = abalone.data, method = 'adaboost', na.action = na.omit)
abalone.data <- abalone.data %>%mutate(
Sex = factor(x = Sex),
Class_number_of_rings = factor(x = Class_number_of_rings, levels = 1:27)
)
abalone.data <- abalone.data %>%mutate(
Sex = factor(x = Sex),
Class_number_of_rings = factor(x = Class_number_of_rings, levels = 1:28)
)
abalone.data
aggr(abalone.data)
abalone.data <- abalone.data
abalone.data <- abalone.data[stats::complete.cases(abalone.data), ]
aggr(abalone.data)
# adaboost.model <-
caret::train(Class_number_of_rings ~ ., data = abalone.data, method = 'adaboost', na.action = na.omit)
abalone.data <- abalone.data %>%mutate(
Sex = factor(x = Sex),
Class_number_of_rings = factor(x = Class_number_of_rings, levels = 1:27)
)
abalone.data <- abalone.data[stats::complete.cases(abalone.data), ]
aggr(abalone.data)
# adaboost.model <-
caret::train(Class_number_of_rings ~ ., data = abalone.data, method = 'adaboost', na.action = na.omit)
# adaboost.model <-
fastAdaboost::adaboost(formula = Sex ~ ., data = abalone.data, nIter = 10)
# adaboost.model <-
fastAdaboost::adaboost(formula = Sex ~ Length + Diameter, data = abalone.data, nIter = 10)
# adaboost.model <-
abalone.data
# adaboost.model <-
fastAdaboost::adaboost(formula = Sex ~ Class_number_of_rings, data = abalone.data, nIter = 10)
# adaboost.model <-
fastAdaboost::adaboost(formula = y ~ ., data = MASS::bacteria, nIter = 10)
abalone.data
abalone.data <- read.csv(file = 'data/abalone.csv')
abalone.data <- abalone.data %>%mutate(
Sex = factor(x = Sex),
Class_number_of_rings = factor(x = Class_number_of_rings, levels = 1:27)
)
abalone.data <- abalone.data[stats::complete.cases(abalone.data), ]
VIM::aggr(abalone.data)
abalone.data
adaboost.model <- fastAdaboost::adaboost(formula = y ~ ., data = MASS::bacteria, nIter = 50)
adaboost.model <- fastAdaboost::adaboost(formula = y ~ ., data = MASS::bacteria, nIter = 1000)
adaboost.model
summary(object = adaboost.model)
adaboost.model$dependent_variable
adaboost.model$weights
packages <- c('fastAdaboost', 'caret', 'dplyr', 'deepboost', 'gbm', 'MASS', 'parallel', 'reticulate', 'VIM', 'xgboost')
install.packages(packages)
install.packages(packages)
lapply(X = packages, FUN = library, character.only = TRUE)
gbm.model <- gbm::gbm(formula = Class_number_of_rings ~ ., data = MASS::bacteria, n.trees = 1000, n.cores = parallel::detectCores() - 1)
gbm.model <- gbm::gbm(formula = y ~ ., data = MASS::bacteria, n.trees = 1000, n.cores = parallel::detectCores() - 1)
gbm.model <- gbm::gbm(formula = y ~ ., data = MASS::bacteria, distribution = 'gaussian',  n.trees = 1000, n.cores = parallel::detectCores() - 1)
summary(object = gbm.model)
gbm.model$fit
gbm.model$train.error
gbm.model$valid.error
predict(object = adaboost.model, newdata = MASS::bacteria[, -y])
predict(object = adaboost.model, newdata = MASS::bacteria[, -c('y')])
MASS::bacteria
predict(object = adaboost.model, newdata = MASS::bacteria[, 2:5])
predict(object = adaboost.model)
MASS::bacteria[, 2:5]
MASS::bacteria[, 1:5]
predict(object = adaboost.model, newdata = MASS::bacteria[, 2:5])
plot(adaboost.model)
adaboost.model
summary(object = adaboost.model)
conda create -n py3.8 python=3.8 scikit-learn pandas numpy matplotlib
n
reticulate::repl_python()
range(4)
range(4)
clear
cls
reticulate::repl_python()
reticulate::repl_python()
x = dict({'test': True})
reticulate::repl_python()
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
error = FALSE
)
reticulate::repl_python()
x = dict({'test': True})
packages <- c('fastAdaboost', 'caret', 'dplyr', 'deepboost', 'gbm', 'MASS', 'parallel', 'reticulate', 'VIM', 'xgboost')
install.packages(packages)
lapply(X = packages, FUN = library, character.only = TRUE)
install.packages(packages)
car.data <- read.table(file = 'data/car.data', header = FALSE, sep = ',')
car.data <- data.frame(car.data)
colnames(x = car.data) <- c('buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'accept')
car.data <- car.data %>% mutate(
buying = factor(x = buying, levels = c('low', 'med', 'high', 'vhigh')),
maint = factor(x = maint, levels = c('low', 'med', 'high', 'vhigh')),
doors = factor(x = doors, levels = c('2', '3', '4', '5-more')),
persons = factor(x = persons, levels = c('2', '4', 'more')),
lug_boot = factor(x = lug_boot, levels = c('small', 'med', 'big')),
safety = factor(x = safety, levels = c('low', 'med', 'high')),
accept = factor(x = accept, levels = c('unacc', 'acc', 'good', 'v-good'))
)
car.data <- car.data[stats::complete.cases(car.data), ]
VIM::aggr(x = car.data)
car.data
x <- car.data[1:6]
y <- car.data$accept
abalone.data <- read.csv(file = 'data/abalone.csv')
abalone.data <- abalone.data %>%mutate(
Sex = factor(x = Sex),
Class_number_of_rings = factor(x = Class_number_of_rings, levels = 1:27)
)
abalone.data <- abalone.data[stats::complete.cases(abalone.data), ]
VIM::aggr(abalone.data)
abalone.data
adaboost.model <- fastAdaboost::adaboost(formula = y ~ ., data = MASS::bacteria, nIter = 1000)
summary(object = adaboost.model)
adaboost.model$weights
# deepboost.model <-
deepboost::deepboost(formula = y ~ ., data = MASS::bacteria, num_iter = 1000)
deepboost.model <- deepboost::deepboost(formula = y ~ ., data = MASS::bacteria, num_iter = 1000)
summary(object = deepboost.model)
plot(deepboost.model)
print(deepboost.model)
print(deepboost.model$)
deepboost.model
summary(object = gbm.model)
gbm.model$valid.error
gbm.model
xgbTree.model <- caret::train(formula = accept ~ ., data = car.data, method = 'xgbTree')
xgboost::xgboost(y ~ ., data = MASS::bacteria, nrounds = 1000)
as.matrix(x = MASS::bacteria)
xgboost::xgboost(y ~ ., data = as.matrix(x = MASS::bacteria), nrounds = 1000)
as.matrix(x = MASS::bacteria)
typeof(x = MASS::bacteria))
typeof(x = MASS::bacteria)
as.data.frame(x = MASS::bacteria)
xgboost::xgboost(y ~ ., data = as.data.frame(x = MASS::bacteria), nrounds = 1000)
as.matrix(x = as.data.frame(x = MASS::bacteria))
xgbTree.model <- caret::train(formula = y ~ ., data = MASS::bacteria, method = 'xgbTree')
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
error = FALSE
)
packages <- c('fastAdaboost', 'caret', 'dplyr', 'deepboost', 'gbm', 'MASS', 'parallel', 'reticulate', 'VIM', 'xgboost')
install.packages(packages)
lapply(X = packages, FUN = library, character.only = TRUE)
install.packages(packages)
s
xgboost.model <- xgboost::xgboost(data = MASS::bacteria, nrounds = 1000)
xgboost.model <- xgboost::xgboost(data =as.data.frame(x = MASS::bacteria), nrounds = 1000)
matrix(MASS::bacteria)
as.matrix( = MASS::bacteria)
as.matrix(x = MASS::bacteria)
xgboost.model <- xgboost::xgboost(data = as.matrix(x = MASS::bacteria), nrounds = 1000)
bacteria.matrix <- as.matrix(x = MASS::bacteria)
as.factor(x = bacteria.matrix[, c(1, 2, 3, 6)])
factor(x = bacteria.matrix[, 1])
for (i in c(1, 2, 3, 6)) {
matrix[, i] <- factor(x = bacteria.matrix[, i])
}
bacteria.matrix[, i] <- factor(x = bacteria.matrix[, i])
for (i in c(1, 2, 3, 6)) {
bacteria.matrix[, i] <- factor(x = bacteria.matrix[, i])
}
for (i in c(4, 5)) {
bacteria.matrix[, i] <- as.numeric(x = bacteria.matrix[, i])
}
bacteria.matrix <- as.matrix(x = MASS::bacteria)
bacteria.matrix
c(1:5)[-4]
bacteria.matrix <- as.matrix(x = MASS::bacteria)
for (i in c(1:6)[-4]) {
bacteria.matrix[, i] <- factor(x = bacteria.matrix[, i])
}
bacteria.matrix[, 4] <- as.integer(x = bacteria.matrix[, 4])
bacteria.matrix
bacteria.matrix <- as.matrix(x = MASS::bacteria)
for (i in c(1:6)[-4]) {
bacteria.matrix[, i] <- factor(x = bacteria.matrix[, i])
}
bacteria.matrix[, 4] <- as.integer(x = bacteria.matrix[, 4])
bacteria.matrix
xgboost.model <- xgboost::xgboost(data = bacteria.matrix, nrounds = 1000)
xgboost.model <- xgboost::xgboost(data = bacteria.matrix[-0], label = bacteria.matrix[0], nrounds = 1000)
bacteria.matrix <- as.matrix(x = MASS::bacteria)
for (i in c(1:6)[-4]) {
bacteria.matrix[, i] <- as.factor(x = bacteria.matrix[, i])
}
bacteria.matrix[, 4] <- as.integer(x = bacteria.matrix[, 4])
bacteria.matrix
xgboost.model <- xgboost::xgboost(data = bacteria.matrix[-0], label = bacteria.matrix[0], nrounds = 1000)
caret::train(y ~ ., data = MASS::bacteria, method = 'xgboost')
caret::train(y ~ ., data = MASS::bacteria, method = 'xgtda')
caret::train(y ~ ., data = MASS::bacteria, method = 'xgdart')
caret::train(y ~ ., data = MASS::bacteria, method = 'xgbtree')
xgboost::xgboost(Sex ~ ., data = abalone.data)
xgboost::xgboost(Sex ~ ., data = as.matrix(x = abalone.data))
