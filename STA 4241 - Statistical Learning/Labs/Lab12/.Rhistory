# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = ending.ldl ~ factor(x = beginning.ldl) + factor(x = cereal), data = df, family = cumulative(parallel = FALSE))
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = ending.ldl ~ factor(x = beginning.ldl) + factor(x = cereal), data = df, family = multinomial)
summary(fit.b)
# fitting multivariate GLMs
# beginning LDL treated as quantitative variable
fit.a <- VGAM::vglm(formula = factor(x = ending.ldl) ~ beginning.ldl + factor(x = cereal), data = df, family = cumulative(parallel = TRUE))
summary(fit.a)
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = factor(x = ending.ldl) ~ factor(x = beginning.ldl) + factor(x = cereal), data = df, family = multinomial)
summary(fit.b)
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = factor(x = ending.ldl) ~ beginning.ldl + factor(x = cereal), data = df, family = multinomial)
summary(fit.b)
# setup repeating predictor values
# ldl <- c(3, 3.75, 4.5, 5.25)
ldl <- c('1', '2', '3', '4')
Begin <- rep(ldl, times = 8) # beginning ldl levels
Cereal <- rep(rep(c('Control', 'Treatment'), each = 4), times = 4) # whether cereal has psyllium as absent or present
# create dataset
df <- data.frame(
ending.ldl = c(A, B, C, D),
beginning.ldl = Begin,
cereal = Cereal
)
df
# fitting multivariate GLMs
# beginning LDL treated as quantitative variable
fit.a <- VGAM::vglm(formula = factor(x = ending.ldl) ~ beginning.ldl + factor(x = cereal), data = df, family = cumulative(parallel = TRUE))
summary(fit.a)
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = factor(x = ending.ldl) ~  factor(x = cereal), data = df, family = multinomial)
summary(fit.b)
Cereal
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = factor(x = ending.ldl) ~ beginning.ldl, data = df, family = multinomial)
summary(fit.b)
# setup repeating predictor values
# ldl <- c(3, 3.75, 4.5, 5.25)
ldl <- c('1', '2', '3', '4')
Begin <- rep(ldl, times = 8) # beginning ldl levels
Cereal <- rep(rep(c('Control', 'Treatment'), each = 4), times = 4) # whether cereal has psyllium as absent or present
# create dataset
df <- data.frame(
ending.ldl = c(A, B, C, D),
beginning.ldl = Begin,
cereal = Cereal
)
df
clear
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = ending.ldl ~ beginning.ldl, data = df, family = multinomial)
summary(fit.b)
# setup repeating predictor values
# ldl <- c(3, 3.75, 4.5, 5.25)
ldl <- c('A', 'B', 'C', 'D')
Begin <- rep(ldl, times = 8) # beginning ldl levels
Cereal <- rep(rep(c('Control', 'Treatment'), each = 4), times = 4) # whether cereal has psyllium as absent or present
# create dataset
df <- data.frame(
ending.ldl = c(A, B, C, D),
beginning.ldl = Begin,
cereal = Cereal
)
df
# create dataset
df <- data.frame(
ending.ldl = c(A, B, C, D),
beginning.ldl = Begin,
cereal = Cereal
)
df
End <- rep(ldl, each = 8)
End
# create dataset
df <- data.frame(
ending.ldl = End,
beginning.ldl = Begin,
cereal = Cereal
)
df
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = ending.ldl ~ beginning.ldl, data = df, family = multinomial)
summary(fit.b)
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = ending.ldl ~ factor(x = beginning.ldl), data = df, family = multinomial)
summary(fit.b)
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = ending.ldl ~ factor(x = beginning.ldl) + factor(x = cereal), data = df, family = multinomial)
summary(fit.b)
# create dataset
df <- data.frame(
A = A,
B = B,
C = C,
D = D,
)
# create dataset
df <- data.frame(
A = A,
B = B,
C = C,
D = D
)
df
# create dataset
df <- data.frame(
A = A,
B = B,
C = C,
D = D,
begin = Begin,
end = End
)
df
# create dataset
df <- data.frame(
A = A,
B = B,
C = C,
D = D,
begin = Begin,
cereal = Cereal
)
df
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = cbind(A, B, C, D) ~ factor(x = cereal), data = df, family = multinomial)
summary(fit.b)
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = cbind(A, B, C, D) ~ cereal, data = df, family = multinomial)
summary(fit.b)
factor(x =
factor(x =
summary(fit.b)
cbind
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = cbind(A, B, C, D) ~ factor(x = cereal), data = df, family = multinomial)
summary(fit.b)
df
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin + factor(x = cereal), data = df, family = multinomial)
summary(fit.b)
df
cereal
Cereal <- rep(rep(c('Control', 'Treatment'), each = 4), times = 4) # whether cereal has psyllium as absent or present
# create dataset
df <- data.frame(
A = A,
B = B,
C = C,
D = D,
begin = Begin,
cereal = Cereal
)
df
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin + cereal, data = df, family = multinomial)
summary(fit.b)
# fitting multivariate GLMs
# beginning LDL treated as quantitative variable
fit.a <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin + cereal, data = df, family = cumulative(parallel = TRUE))
summary(fit.a)
# setup repeating predictor values
ldl <- c(3, 3.75, 4.5, 5.25)
# ldl <- c('A', 'B', 'C', 'D')
End <- rep(ldl, each = 8)
Begin <- rep(ldl, times = 8) # beginning ldl levels
Cereal <- rep(rep(c('Control', 'Treatment'), each = 4), times = 4) # whether cereal has psyllium as absent or present
# create dataset
df <- data.frame(
A = A,
B = B,
C = C,
D = D,
begin = Begin,
cereal = Cereal
)
df
# fitting multivariate GLMs
# beginning LDL treated as quantitative variable
fit.a <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin + cereal, data = df, family = cumulative(parallel = TRUE))
summary(fit.a)
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin + cereal, data = df, family = multinomial)
summary(fit.b)
stats::AIC(object = fit.a)
summary(fit.a)
aic.a <- stats::AIC(object = fit.a)
aic.a
library(VGAM)
# levels of cholesterol
A <- c(18, 16, 0, 0, 21, 17, 11, 1)
B <- c(8, 30, 14, 2, 4, 25, 35, 5)
C <- c(0, 13, 28, 15, 2, 6, 36, 14)
D <- c(0, 2, 7, 22, 0, 0, 6, 12)
# setup repeating predictor values
ldl <- c(3, 3.75, 4.5, 5.25)
# ldl <- c('A', 'B', 'C', 'D')
End <- rep(ldl, each = 8)
Begin <- rep(ldl, times = 8) # beginning ldl levels
Cereal <- rep(rep(c('Control', 'Treatment'), each = 4), times = 4) # whether cereal has psyllium as absent or present
# create dataset
df <- data.frame(
A = A,
B = B,
C = C,
D = D,
begin = Begin,
cereal = Cereal
)
df
# fitting multivariate GLMs
# beginning LDL treated as quantitative variable
fit.a <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin + cereal, data = df, family = cumulative(parallel = TRUE))
summary(fit.a)
aic.a <- stats::AIC(object = fit.a)
aic.a
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin + cereal, data = df, family = multinomial)
summary(fit.b)
aic.a <- stats::AIC(object = fit.a, k = 5)
aic.a
library(VGAM)
# levels of cholesterol
A <- c(18, 16, 0, 0, 21, 17, 11, 1)
B <- c(8, 30, 14, 2, 4, 25, 35, 5)
C <- c(0, 13, 28, 15, 2, 6, 36, 14)
D <- c(0, 2, 7, 22, 0, 0, 6, 12)
# setup repeating predictor values
ldl <- c(3, 3.75, 4.5, 5.25)
End <- rep(ldl, each = 8)
Begin <- rep(ldl, times = 8) # beginning ldl levels
Cereal <- rep(rep(c('Control', 'Treatment'), each = 4), times = 4) # whether cereal has psyllium as absent or present
# create dataset
df <- data.frame(
A = A,
B = B,
C = C,
D = D,
begin = Begin,
cereal = Cereal
)
df
# fitting multivariate GLMs
# beginning LDL treated as quantitative variable
fit.a <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin + cereal, data = df, family = cumulative(parallel = TRUE))
summary(fit.a)
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin + cereal, data = df, family = multinomial)
summary(fit.b)
aic.a <- 2*ln(3)
fit.null <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin, data = df, family = cumulative(parallel = TRUE))
VGAM::lrtest(fit.a, fit.null)
fit.null <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin, data = df, family = multinomial)
VGAM::lrtest(fit.a, fit.null)
# fitting multivariate GLMs
# beginning LDL treated as quantitative variable
fit.a <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin + cereal, data = df, family = cumulative(parallel = TRUE))
summary(fit.a)
unlist(fit.a)
unlist(fit.a)[1]
as.vector(unlist(fit.a))
unlist(fit.a)[3]
fit.a
fit.a[2]
aic.a <- 2 * 5 - 2 * log(x = -156.2641)
aic.a
aic.a <- 2 * 5 - 2 * -156.2641
aic.a
aic.b <- 2 *
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin + cereal, data = df, family = multinomial)
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin + cereal, data = df, family = multinomial)
summary(fit.b)
aic.b <- 2 * 9 - -156.7082
aic.b
# beginning LDL treated as qualitative (nominal) variable
fit.b <- VGAM::vglm(formula = cbind(A, B, C, D) ~ begin + cereal, data = df, family = multinomial)
summary(fit.b)
packages <- c('FNN', 'fields', 'splines')
install.packages(packages)
install.packages(packages)
lapply(library, packages, character.only = TRUE)
lapply(packages, library, character.only = TRUE)
xnew <- seq(-10, 10, by = 0.01)
data <- read.csv(file = 'TrainingData.csv', header = TRUE)
data <- read.csv(file = './TrainingData.csv', header = TRUE)
getwd()
packages <- c('FNN', 'fields', 'rstudioapi',  'splines')
install.packages(packages)
install.packages(packages)
lapply(packages, library, character.only = TRUE)
lapply(packages, library, character.only = TRUE)
rstudioapi::getSourceEditorContext()
rstudioapi::getSourceEditorContext()$path
strsplit(x = rstudioapi::getSourceEditorContext()$path, split = '/')
packages <- c('FNN', 'fields', 'here', 'rstudioapi',  'splines')
install.packages(packages)
install.packages(packages)
lapply(packages, library, character.only = TRUE)
here::here()
here::dr_here()
strsplit(x = rstudioapi::getSourceEditorContext()$path, split = '/', perl = TRUE)
rstudioapi::getSourceEditorContext()$path[1:5]
rstudioapi::getSourceEditorContext()$path
substr(x = rstudioapi::getSourceEditorContext()$path, start = 1, stop = '/')
substr(x = rstudioapi::getSourceEditorContext()$path, start = 1, stop = 5)
path <- rstudioapi::getSourceEditorContext()$path
setwd(dir = path)
gregexpr(pattern = '/', text = path)
setwd(dir = path)[1]
gregexpr(pattern = '/', text = path)[0]
gregexpr(pattern = '/', text = path)[1]
unlist(gregexpr(pattern = '/', text = path))
unlist(gregexpr(pattern = '/', text = path))[-1]
unlist(gregexpr(pattern = '/', text = path))[-2]
unlist(gregexpr(pattern = '/', text = path))[1]
order(unlist(gregexpr(pattern = '/', text = path))[1])
order(unlist(gregexpr(pattern = '/', text = path)))
dplyr::last(x = unlist(gregexpr(pattern = '/', text = path)))
split.index <- dplyr::last(x = unlist(gregexpr(pattern = '/', text = path)))
substr(x = path, start = 1, stop = split.index)
path.wd <- substr(x = path, start = 1, stop = split.index)
setwd(dir = path.wd)
getwd()
# reading data
data <- read.csv(file = 'TrainingData.csv', header = TRUE)
x = data$x
y = data$y
# data for predictions
xnew <- seq(-10, 10, by = 0.01)
x
y
plot(x = x, y = y)
# KNN regression
FNN::knn.reg(train = x, test = y)
length(x)
length(y)
data
typeof(data)
df <- data.frame(x = x, y = y)
# KNN regression
FNN::knn.reg(train = df$x, test = y)
# KNN regression
FNN::knn.reg(train = df$x, test = df$y)
# KNN regression
FNN::knn.reg(train = df$x, test = df$y, k = 20)
# KNN regression
FNN::knn.reg(train = df$x, test = df$y, k = 20)
df
# KNN regression
FNN::knn.reg(train = as.vector(x), test = y, k = 20)
# data for predictions
xnew <- seq(-10, 10, by = 0.01)
# KNN regression
FNN::knn.reg(train = as.vector(x), test = as.vector(y), k = 20)
# KNN regression
FNN::knn.reg(train = x, test = xnew, y = y, k = 20)
# KNN regression
FNN::knn.reg(train = df$x, test = xnew, y = y, k = 20)
# KNN regression
FNN::knn.reg(train = data.frame(x = x), test = xnew, y = y, k = 20)
# KNN regression
FNN::knn.reg(train = data.frame(x = x), test =data.frame(x = xnew), y = y, k = 20)
# KNN regression
knn.model <- FNN::knn.reg(train = data.frame(x = x), test =data.frame(x = xnew), y = y, k = 20)
knn.model$k
knn.model$R2Pred
knn.model$residuals
# KNN regression
knn.model <- FNN::knn.reg(train = data.frame(x = x), test =data.frame(x = xnew), y = y, k = 20, algorithm=c("kd_tree",
"cover_tree", "brute"))
# KNN regression
knn.model <- FNN::knn.reg(
train = data.frame(x = x),
test =data.frame(x = xnew),
y = y, k = 20,
algorithm = c('kd_tree', 'cover_tree', 'brute')
)
# KNN regression
knn.model <- FNN::knn.reg(
train = data.frame(x = x),
test =data.frame(x = xnew),
y = y, k = 20,
algorithm = c('kd_tree', 'cover_tree', 'brute')
)
knn.model$residuals
knn.model
stats::loess(
formula = y ~ x)
y
stats::loess(
formula = y ~ x),
model = TRUE,
span = 0.75,
degree = 2,
family = c("gaussian", "symmetric"),
method = c("loess", "model.frame")
local.model <- stats::loess(
formula = y ~ x),
model = TRUE,
span = 0.75,
degree = 2,
family = c("gaussian", "symmetric"),
method = c("loess", "model.frame")
local.model
# local regression
local.model <- stats::loess(
formula = y ~ x),
model = TRUE,
span = 0.75,
degree = 2,
family = c("gaussian", "symmetric"),
method = c("loess", "model.frame")
# local regression
local.model <- stats::loess(
formula = y ~ x),
model = TRUE,
span = 0.75,
degree = 2,
family = c('gaussian', 'symmetric'),
method = 'loess'
# local regression
local.model <- stats::loess(
formula = y ~ x,
model = TRUE,
span = 0.75,
degree = 2,
family = c('gaussian', 'symmetric'),
method = 'loess'
)
local.model
packages <- c('FNN', 'fields', 'NMOF',  'rstudioapi',  'splines')
install.packages(packages)
install.packages(packages)
lapply(packages, library, character.only = TRUE)
# KNN regression
NMOF::gridSearch(fun = FNN::knn.reg, levels = 1:10)
# KNN regression
NMOF::gridSearch(fun = FNN::knn.reg, levels = 1:10
train = data.frame(x = x),
test = data.frame(x = xnew),
y = y
)
# KNN regression
NMOF::gridSearch(fun = FNN::knn.reg, levels = 1:10,
train = data.frame(x = x),
test = data.frame(x = xnew),
y = y
)
# KNN regression
NMOF::gridSearch(
fun = FNN::knn.reg,
levels = list(k = 1:20),
train = data.frame(x = x),
test = data.frame(x = xnew),
y = y
)
# KNN regression
knn.model <- FNN::knn.reg(
train = data.frame(x = x),
test = data.frame(x = xnew),
y = y,
k = 10,
algorithm = c('kd_tree', 'cover_tree', 'brute')
)
knn.model
# local regression
local.model <- stats::loess(
formula = y ~ x,
model = TRUE,
span = 0.75,
degree = 5,
family = c('gaussian', 'symmetric'),
method = 'loess'
)
local.model
local.model
predict(object = local.model, newdata = xnew)
local.pred <- predict(object = local.model, newdata = xnew)
packages <- c('FNN', 'fields',  'mgcv', 'rstudioapi',  'splines')
install.packages(packages)
install.packages(packages)
lapply(packages, library, character.only = TRUE)
# GAM regression
mgcv::gam(formula = y ~ x)
predict(object = gam.model, newdata = xnew)
# generalized additive model regression
gam.model <- mgcv::gam(formula = y ~ x)
predict(object = gam.model, newdata = xnew)
gam.model$pred.formula
predict(object = gam.model, newdata = xnew)
mgcv::predict.gam(object = gam.model, newdata = xnew)
mgcv::predict(object = gam.model, newdata = xnew)
mgcv::predict.gam(object = gam.model, newdata = xnew)
mgcv::predict.gam(gam.model, xnew)
finalPredictions <- data.frame(prediction1 = knn.model,
prediction2 = local.pred)
finalPredictions <- data.frame(prediction1 = knn.model,
prediction2 = local.pred)
knn.model
as.vector(knn.model)
finalPredictions <- data.frame(prediction1 = as.vector(knn.model),
prediction2 = local.pred)
finalPredictions <- data.frame(prediction1 = as.vector(knn.model$pred),
prediction2 = local.pred)
finalPredictions <- data.frame(prediction1 = knn.model$pred,
prediction2 = local.pred)
write.csv(finalPredictions, file="Qin_Caijun.csv")
finalPredictions
